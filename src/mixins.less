@fn : {.fn(@args...){}};
@null : ~"";

.list{
  .first(@list, @scope){
    @scope();
    .fn(extract(@list, 1));
  }

  .last(@list, @scope){
    @scope();
    .fn(extract(@list, length(@list)));
  }

  .map(@list, @scope, @from: 1, @to : length(@list)){
    @length: length(@list);
    @scope();

    // for negative index values count from end of list
    .prepare() when (@from < 0){ @start: @length + @from + 1; }
    .prepare() when (@to < 0){ @end: @length + @to + 1; }

    // otherwise use provided indexes
    .prepare() when (@from > 0){ @start: @from; }
    .prepare() when (@to > 0){ @end: @to; }

    // determine the direction of iteration (asc, desc)
    .init() when (@start < @end){ @inc: 1; }
    .init() when (@start > @end){ @inc: -1; }

    .iterate(@i){
      .execute(){
        .fn(extract(@list, @i));  // call .fn() mixin defined in passed ruleset @scope
      }
      .execute();
    }

    .iterate(@i) when not (@i = @end){
      .iterate(@i+@inc); // recursive call
    }

    .prepare();
    .init();
    .iterate(@start); // call first iteration
  }
}

.hash{
  .map(@map, @scope) when (length(@map) > 1) and (length(extract(@map, 1)) > 1){
    .list.map(@map, {
      .fn(@i) when (length(@i) > 1){
        @scope();
        .fn(extract(@i,1), extract(@i,2));
      }
    });
  }
  .map(@map, @scope) when not (length(@map) > 1) and not (length(extract(@map, 1)) > 1){
    @scope();
    .fn(extract(@map,1), extract(@map,2));
  }
}

.range{
  .map(@range; @scope; @step:1){
    .prepare-args() when (isnumber(@range)) {
      @from : 1;
      @to : @range;
    }
    .prepare-args() when not (isnumber(@range)) and ( length(@range) = 2) {
      @from : extract(@range, 1);
      @to : extract(@range, 2);
    }
    .init() when ( @from < @to) {
      @inc : 1;
    }
    .init() when ( @from > @to) {
      @inc : -1;
    }
    .iterate(@i){
      @scope();
      .fn(@i);
    }
    .iterate(@i) when not (@i = @to){
      .iterate(@i+@inc * @step);
    }
    .prepare-args();
    .init();
    .iterate(@from);
  }
}
